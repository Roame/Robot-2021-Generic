// automatically generated by the FlatBuffers compiler, do not modify

package frc.taurus.logger.generated;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class LogFileHeader extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static LogFileHeader getRootAsLogFileHeader(ByteBuffer _bb) { return getRootAsLogFileHeader(_bb, new LogFileHeader()); }
  public static LogFileHeader getRootAsLogFileHeader(ByteBuffer _bb, LogFileHeader obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean LogFileHeaderBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "FLOG"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public LogFileHeader __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double timestamp() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public frc.taurus.config.generated.Configuration configuration() { return configuration(new frc.taurus.config.generated.Configuration()); }
  public frc.taurus.config.generated.Configuration configuration(frc.taurus.config.generated.Configuration obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createLogFileHeader(FlatBufferBuilder builder,
      double timestamp,
      int configurationOffset) {
    builder.startTable(2);
    LogFileHeader.addTimestamp(builder, timestamp);
    LogFileHeader.addConfiguration(builder, configurationOffset);
    return LogFileHeader.endLogFileHeader(builder);
  }

  public static void startLogFileHeader(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addTimestamp(FlatBufferBuilder builder, double timestamp) { builder.addDouble(0, timestamp, 0.0); }
  public static void addConfiguration(FlatBufferBuilder builder, int configurationOffset) { builder.addOffset(1, configurationOffset, 0); }
  public static int endLogFileHeader(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // configuration
    return o;
  }
  public static void finishLogFileHeaderBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "FLOG"); }
  public static void finishSizePrefixedLogFileHeaderBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "FLOG"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public LogFileHeader get(int j) { return get(new LogFileHeader(), j); }
    public LogFileHeader get(LogFileHeader obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

