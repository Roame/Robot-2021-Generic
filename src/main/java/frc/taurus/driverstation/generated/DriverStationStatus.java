// automatically generated by the FlatBuffers compiler, do not modify

package frc.taurus.driverstation.generated;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class DriverStationStatus extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static DriverStationStatus getRootAsDriverStationStatus(ByteBuffer _bb) { return getRootAsDriverStationStatus(_bb, new DriverStationStatus()); }
  public static DriverStationStatus getRootAsDriverStationStatus(ByteBuffer _bb, DriverStationStatus obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean DriverStationStatusBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "DSST"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DriverStationStatus __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double timestamp() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public boolean enabled() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean autonomous() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean teleop() { int o = __offset(10); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean test() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean dsAttached() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean fmsAttached() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public String gameSpecificMessage() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer gameSpecificMessageAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer gameSpecificMessageInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  public double matchTime() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createDriverStationStatus(FlatBufferBuilder builder,
      double timestamp,
      boolean enabled,
      boolean autonomous,
      boolean teleop,
      boolean test,
      boolean ds_attached,
      boolean fms_attached,
      int game_specific_messageOffset,
      double match_time) {
    builder.startTable(9);
    DriverStationStatus.addMatchTime(builder, match_time);
    DriverStationStatus.addTimestamp(builder, timestamp);
    DriverStationStatus.addGameSpecificMessage(builder, game_specific_messageOffset);
    DriverStationStatus.addFmsAttached(builder, fms_attached);
    DriverStationStatus.addDsAttached(builder, ds_attached);
    DriverStationStatus.addTest(builder, test);
    DriverStationStatus.addTeleop(builder, teleop);
    DriverStationStatus.addAutonomous(builder, autonomous);
    DriverStationStatus.addEnabled(builder, enabled);
    return DriverStationStatus.endDriverStationStatus(builder);
  }

  public static void startDriverStationStatus(FlatBufferBuilder builder) { builder.startTable(9); }
  public static void addTimestamp(FlatBufferBuilder builder, double timestamp) { builder.addDouble(0, timestamp, 0.0); }
  public static void addEnabled(FlatBufferBuilder builder, boolean enabled) { builder.addBoolean(1, enabled, false); }
  public static void addAutonomous(FlatBufferBuilder builder, boolean autonomous) { builder.addBoolean(2, autonomous, false); }
  public static void addTeleop(FlatBufferBuilder builder, boolean teleop) { builder.addBoolean(3, teleop, false); }
  public static void addTest(FlatBufferBuilder builder, boolean test) { builder.addBoolean(4, test, false); }
  public static void addDsAttached(FlatBufferBuilder builder, boolean dsAttached) { builder.addBoolean(5, dsAttached, false); }
  public static void addFmsAttached(FlatBufferBuilder builder, boolean fmsAttached) { builder.addBoolean(6, fmsAttached, false); }
  public static void addGameSpecificMessage(FlatBufferBuilder builder, int gameSpecificMessageOffset) { builder.addOffset(7, gameSpecificMessageOffset, 0); }
  public static void addMatchTime(FlatBufferBuilder builder, double matchTime) { builder.addDouble(8, matchTime, 0.0); }
  public static int endDriverStationStatus(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishDriverStationStatusBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "DSST"); }
  public static void finishSizePrefixedDriverStationStatusBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "DSST"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DriverStationStatus get(int j) { return get(new DriverStationStatus(), j); }
    public DriverStationStatus get(DriverStationStatus obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

