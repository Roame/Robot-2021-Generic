// automatically generated by the FlatBuffers compiler, do not modify

package frc.taurus.drivetrain.generated;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class DrivetrainInput extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static DrivetrainInput getRootAsDrivetrainInput(ByteBuffer _bb) { return getRootAsDrivetrainInput(_bb, new DrivetrainInput()); }
  public static DrivetrainInput getRootAsDrivetrainInput(ByteBuffer _bb, DrivetrainInput obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean DrivetrainInputBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "DRVI"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DrivetrainInput __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double timestamp() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public float leftDistance() { int o = __offset(6); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float rightDistance() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float leftVelocity() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float rightVelocity() { int o = __offset(12); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float leftVoltage() { int o = __offset(14); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float rightVoltage() { int o = __offset(16); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float leftBusVoltage() { int o = __offset(18); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float rightBusVoltage() { int o = __offset(20); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float leftCurrent() { int o = __offset(22); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float rightCurrent() { int o = __offset(24); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float gyroAngleRad() { int o = __offset(26); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createDrivetrainInput(FlatBufferBuilder builder,
      double timestamp,
      float left_distance,
      float right_distance,
      float left_velocity,
      float right_velocity,
      float left_voltage,
      float right_voltage,
      float left_bus_voltage,
      float right_bus_voltage,
      float left_current,
      float right_current,
      float gyro_angle_rad) {
    builder.startTable(12);
    DrivetrainInput.addTimestamp(builder, timestamp);
    DrivetrainInput.addGyroAngleRad(builder, gyro_angle_rad);
    DrivetrainInput.addRightCurrent(builder, right_current);
    DrivetrainInput.addLeftCurrent(builder, left_current);
    DrivetrainInput.addRightBusVoltage(builder, right_bus_voltage);
    DrivetrainInput.addLeftBusVoltage(builder, left_bus_voltage);
    DrivetrainInput.addRightVoltage(builder, right_voltage);
    DrivetrainInput.addLeftVoltage(builder, left_voltage);
    DrivetrainInput.addRightVelocity(builder, right_velocity);
    DrivetrainInput.addLeftVelocity(builder, left_velocity);
    DrivetrainInput.addRightDistance(builder, right_distance);
    DrivetrainInput.addLeftDistance(builder, left_distance);
    return DrivetrainInput.endDrivetrainInput(builder);
  }

  public static void startDrivetrainInput(FlatBufferBuilder builder) { builder.startTable(12); }
  public static void addTimestamp(FlatBufferBuilder builder, double timestamp) { builder.addDouble(0, timestamp, 0.0); }
  public static void addLeftDistance(FlatBufferBuilder builder, float leftDistance) { builder.addFloat(1, leftDistance, 0.0f); }
  public static void addRightDistance(FlatBufferBuilder builder, float rightDistance) { builder.addFloat(2, rightDistance, 0.0f); }
  public static void addLeftVelocity(FlatBufferBuilder builder, float leftVelocity) { builder.addFloat(3, leftVelocity, 0.0f); }
  public static void addRightVelocity(FlatBufferBuilder builder, float rightVelocity) { builder.addFloat(4, rightVelocity, 0.0f); }
  public static void addLeftVoltage(FlatBufferBuilder builder, float leftVoltage) { builder.addFloat(5, leftVoltage, 0.0f); }
  public static void addRightVoltage(FlatBufferBuilder builder, float rightVoltage) { builder.addFloat(6, rightVoltage, 0.0f); }
  public static void addLeftBusVoltage(FlatBufferBuilder builder, float leftBusVoltage) { builder.addFloat(7, leftBusVoltage, 0.0f); }
  public static void addRightBusVoltage(FlatBufferBuilder builder, float rightBusVoltage) { builder.addFloat(8, rightBusVoltage, 0.0f); }
  public static void addLeftCurrent(FlatBufferBuilder builder, float leftCurrent) { builder.addFloat(9, leftCurrent, 0.0f); }
  public static void addRightCurrent(FlatBufferBuilder builder, float rightCurrent) { builder.addFloat(10, rightCurrent, 0.0f); }
  public static void addGyroAngleRad(FlatBufferBuilder builder, float gyroAngleRad) { builder.addFloat(11, gyroAngleRad, 0.0f); }
  public static int endDrivetrainInput(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishDrivetrainInputBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "DRVI"); }
  public static void finishSizePrefixedDrivetrainInputBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "DRVI"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DrivetrainInput get(int j) { return get(new DrivetrainInput(), j); }
    public DrivetrainInput get(DrivetrainInput obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

