// automatically generated by the FlatBuffers compiler, do not modify

package frc.taurus.drivetrain.generated;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class TeleopGoal extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static TeleopGoal getRootAsTeleopGoal(ByteBuffer _bb) { return getRootAsTeleopGoal(_bb, new TeleopGoal()); }
  public static TeleopGoal getRootAsTeleopGoal(ByteBuffer _bb, TeleopGoal obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TeleopGoal __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float leftSpeed() { int o = __offset(4); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float rightSpeed() { int o = __offset(6); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createTeleopGoal(FlatBufferBuilder builder,
      float left_speed,
      float right_speed) {
    builder.startTable(2);
    TeleopGoal.addRightSpeed(builder, right_speed);
    TeleopGoal.addLeftSpeed(builder, left_speed);
    return TeleopGoal.endTeleopGoal(builder);
  }

  public static void startTeleopGoal(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addLeftSpeed(FlatBufferBuilder builder, float leftSpeed) { builder.addFloat(0, leftSpeed, 0.0f); }
  public static void addRightSpeed(FlatBufferBuilder builder, float rightSpeed) { builder.addFloat(1, rightSpeed, 0.0f); }
  public static int endTeleopGoal(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TeleopGoal get(int j) { return get(new TeleopGoal(), j); }
    public TeleopGoal get(TeleopGoal obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

