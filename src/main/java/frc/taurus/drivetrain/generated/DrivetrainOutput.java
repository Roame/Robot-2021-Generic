// automatically generated by the FlatBuffers compiler, do not modify

package frc.taurus.drivetrain.generated;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class DrivetrainOutput extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static DrivetrainOutput getRootAsDrivetrainOutput(ByteBuffer _bb) { return getRootAsDrivetrainOutput(_bb, new DrivetrainOutput()); }
  public static DrivetrainOutput getRootAsDrivetrainOutput(ByteBuffer _bb, DrivetrainOutput obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean DrivetrainOutputBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "DRVO"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DrivetrainOutput __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double timestamp() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public byte driveControlMode() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public byte talonControlMode() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public float leftSetpoint() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float rightSetpoint() { int o = __offset(12); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float leftSetpointFeedForward() { int o = __offset(14); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float rightSetpointFeedForward() { int o = __offset(16); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public boolean highGear() { int o = __offset(18); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createDrivetrainOutput(FlatBufferBuilder builder,
      double timestamp,
      byte drive_control_mode,
      byte talon_control_mode,
      float left_setpoint,
      float right_setpoint,
      float left_setpoint_feed_forward,
      float right_setpoint_feed_forward,
      boolean high_gear) {
    builder.startTable(8);
    DrivetrainOutput.addTimestamp(builder, timestamp);
    DrivetrainOutput.addRightSetpointFeedForward(builder, right_setpoint_feed_forward);
    DrivetrainOutput.addLeftSetpointFeedForward(builder, left_setpoint_feed_forward);
    DrivetrainOutput.addRightSetpoint(builder, right_setpoint);
    DrivetrainOutput.addLeftSetpoint(builder, left_setpoint);
    DrivetrainOutput.addHighGear(builder, high_gear);
    DrivetrainOutput.addTalonControlMode(builder, talon_control_mode);
    DrivetrainOutput.addDriveControlMode(builder, drive_control_mode);
    return DrivetrainOutput.endDrivetrainOutput(builder);
  }

  public static void startDrivetrainOutput(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addTimestamp(FlatBufferBuilder builder, double timestamp) { builder.addDouble(0, timestamp, 0.0); }
  public static void addDriveControlMode(FlatBufferBuilder builder, byte driveControlMode) { builder.addByte(1, driveControlMode, 0); }
  public static void addTalonControlMode(FlatBufferBuilder builder, byte talonControlMode) { builder.addByte(2, talonControlMode, 0); }
  public static void addLeftSetpoint(FlatBufferBuilder builder, float leftSetpoint) { builder.addFloat(3, leftSetpoint, 0.0f); }
  public static void addRightSetpoint(FlatBufferBuilder builder, float rightSetpoint) { builder.addFloat(4, rightSetpoint, 0.0f); }
  public static void addLeftSetpointFeedForward(FlatBufferBuilder builder, float leftSetpointFeedForward) { builder.addFloat(5, leftSetpointFeedForward, 0.0f); }
  public static void addRightSetpointFeedForward(FlatBufferBuilder builder, float rightSetpointFeedForward) { builder.addFloat(6, rightSetpointFeedForward, 0.0f); }
  public static void addHighGear(FlatBufferBuilder builder, boolean highGear) { builder.addBoolean(7, highGear, false); }
  public static int endDrivetrainOutput(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishDrivetrainOutputBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "DRVO"); }
  public static void finishSizePrefixedDrivetrainOutputBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "DRVO"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DrivetrainOutput get(int j) { return get(new DrivetrainOutput(), j); }
    public DrivetrainOutput get(DrivetrainOutput obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

