// automatically generated by the FlatBuffers compiler, do not modify

package frc.taurus.config.generated;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Channel extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static Channel getRootAsChannel(ByteBuffer _bb) { return getRootAsChannel(_bb, new Channel()); }
  public static Channel getRootAsChannel(ByteBuffer _bb, Channel obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Channel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte channelType() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String logFilename() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer logFilenameAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer logFilenameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }

  public static int createChannel(FlatBufferBuilder builder,
      byte channelType,
      int nameOffset,
      int log_filenameOffset) {
    builder.startTable(3);
    Channel.addLogFilename(builder, log_filenameOffset);
    Channel.addName(builder, nameOffset);
    Channel.addChannelType(builder, channelType);
    return Channel.endChannel(builder);
  }

  public static void startChannel(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addChannelType(FlatBufferBuilder builder, byte channelType) { builder.addByte(0, channelType, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static void addLogFilename(FlatBufferBuilder builder, int logFilenameOffset) { builder.addOffset(2, logFilenameOffset, 0); }
  public static int endChannel(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // name
    builder.required(o, 8);  // log_filename
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Channel get(int j) { return get(new Channel(), j); }
    public Channel get(Channel obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

